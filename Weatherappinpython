import requests
from typing import Optional, Dict, List
from collections import defaultdict, Counter
from datetime import datetime

API_KEY = "YOUR_API_KEY"  # Replace with your OpenWeatherMap API key
CURRENT_WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"


# ----------------- Weather Functions -----------------
def get_current_weather(city: str) -> Optional[Dict]:
    """Fetch current weather data for a city."""
    params = {"q": city, "appid": API_KEY, "units": "metric"}
    try:
        response = requests.get(CURRENT_WEATHER_URL, params=params, timeout=5)
        response.raise_for_status()
        return response.json()
    except requests.RequestException:
        return None


def get_forecast(city: str) -> Optional[List[Dict]]:
    """Fetch 3-day forecast data for a city."""
    params = {"q": city, "appid": API_KEY, "units": "metric"}
    try:
        response = requests.get(FORECAST_URL, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data.get("list", [])
    except requests.RequestException:
        return None


def show_current_weather(data: Optional[Dict]) -> None:
    """Display current weather information."""
    if not data:
        print("City not found or API request failed.\n")
        return

    city = data.get("name", "Unknown")
    main = data.get("main", {})
    wind = data.get("wind", {})
    weather_desc = data.get("weather", [{}])[0].get("description", "N/A").title()

    temp = main.get("temp", "N/A")
    feels_like = main.get("feels_like", "N/A")
    humidity = main.get("humidity", "N/A")
    wind_speed = wind.get("speed", "N/A")

    print(f"\nCurrent Weather for {city}")
    print(f"Temperature: {temp}°C")
    print(f"Feels Like: {feels_like}°C")
    print(f"Humidity: {humidity}%")
    print(f"Wind Speed: {wind_speed} m/s")
    print(f"Condition: {weather_desc}\n")


def show_daily_forecast(forecast_list: Optional[List[Dict]]) -> None:
    """Display 3-day forecast aggregated by day."""
    if not forecast_list:
        print("Forecast data not available.\n")
        return

    daily_data = defaultdict(list)

    for entry in forecast_list:
        dt_txt = entry.get("dt_txt")
        if not dt_txt:
            continue
        date_str = dt_txt.split(" ")[0]  # Extract YYYY-MM-DD
        daily_data[date_str].append(entry)

    print("3-Day Forecast (Daily Summary):")
    for date_str, entries in list(daily_data.items())[:3]:
        temps = [e["main"]["temp"] for e in entries]
        feels = [e["main"]["feels_like"] for e in entries]
        humidity = [e["main"]["humidity"] for e in entries]
        wind_speeds = [e["wind"]["speed"] for e in entries]
        conditions = [e["weather"][0]["description"].title() for e in entries]

        most_common_condition = Counter(conditions).most_common(1)[0][0]

        print(f"{date_str} | Min Temp: {min(temps)}°C | Max Temp: {max(temps)}°C | "
              f"Avg Feels Like: {sum(feels)/len(feels):.1f}°C | "
              f"Avg Humidity: {sum(humidity)/len(humidity):.1f}% | "
              f"Avg Wind: {sum(wind_speeds)/len(wind_speeds):.1f} m/s | "
              f"Condition: {most_common_condition}")
    print()


# ----------------- Main Program -----------------
def main() -> None:
    """Main program loop for Weather App with daily forecast."""
    print("=== WEATHER APP ===")
    while True:
        city = input("Enter city name (or 'exit' to quit): ").strip()
        if city.lower() == "exit":
            print("Goodbye!")
            break
        if not city:
            print("Please enter a valid city name.")
            continue

        current_data = get_current_weather(city)
        forecast_data = get_forecast(city)

        show_current_weather(current_data)
        show_daily_forecast(forecast_data)


if __name__ == "__main__":
    main()
